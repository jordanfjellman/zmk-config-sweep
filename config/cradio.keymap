/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W         &kp E       &kp R                           &kp T                     &kp Y  &kp U       &kp I       &kp O         &kp P
&hm LCTRL A  &hm LSHIFT S  &hm LALT D  &hm LCMD F                      &kp G                     &kp H  &hm RCMD J  &hm RALT K  &hm RSHIFT L  &hm RCTRL SEMI
&kp Z        &kp X         &kp C       &kp V                           &kp B                     &kp N  &kp M       &kp COMMA   &kp PERIOD    &kp SLASH
                                       &mt LC(LS(LA(LCMD))) BACKSPACE  &mt LC(LS(LALT)) ENTER    &to 1  &kp SPACE
            >;
        };

        symbols_layer {
            bindings = <
&kp ESC    &kp AT_SIGN    &kp HASH   &td LS(LG(N4)) DOLLAR  &kp PERCENT    &kp CARET  &kp AMPS   &kp STAR  &kp PIPE  &none
&kp TAB    &kp LESS_THAN  &kp EQUAL  &kp GREATER_THAN       &kp SQT        &kp COLON  &kp RPAR   &kp LPAR  &kp SEMI  &kp ENTER
&kp TILDE  &kp PLUS       &kp MINUS  &kp GRAVE              &kp DQT        &kp MINUS  &kp RBKT   &kp LBKT  &kp BSLH  &none
                                     &kp BACKSPACE          &to 0          &to 2      &kp SPACE
            >;
        };

        numbers_layer {
            bindings = <
&trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS    &kp LG(LS(LEFT_BRACKET))  &kp LC(D)                 &kp RC(U)         &kp RG(RS(RIGHT_BRACKET))  &trans
&trans           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS     &kp LEFT_ARROW            &hm RIGHT_GUI DOWN_ARROW  &kp RA(UP_ARROW)  &kp RS(RIGHT_ARROW)        &trans
&kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_EQUAL    &kp LG(LEFT_BRACKET)      &kp LS(G)                 &kp G             &kp RG(RIGHT_BRACKET)      &trans
                                                   &trans           &trans          &to 3                     &trans
            >;
        };

        settings_layer {
            bindings = <
&bootloader   &sys_reset    &none         &none         &none     &none       &none       &none       &sys_reset  &bootloader
&none         &bt BT_SEL 4  &none         &none         &none     &bt BT_PRV  &bt BT_CLR  &bt BT_CLR  &bt BT_NXT  &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none     &none       &none       &none       &none       &none
                                          &none         &trans    &to 4       &none
            >;
        };

        isrt_layer {
            bindings = <
&kp Y      &kp C      &kp L       &kp M                       &kp K         &kp Z  &kp F              &kp U                 &td MINUS COMMA  &none
&kp LC(I)  &kp LS(S)  &hm LALT R  &hm LGUI T                  &kp G         &kp P  &hm RGUI N         &hm RALT E            &kp RS(A)        &kp RC(O)
&kp Q      &kp V      &kp W       &kp D                       &kp J         &kp B  &kp H              &td UNDERSCORE SLASH  &td EXCL DOT     &kp X
                                  &mt LC(LS(LALT)) BACKSPACE  &sk LSHIFT    &to 1  &sk RIGHT_CONTROL
            >;
        };
    };
};
